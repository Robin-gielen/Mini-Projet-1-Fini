#BlueJ class context
comment0.params=expression
comment0.target=Node(java.lang.String)
comment0.text=\r\n\ \r\n\ Constructeur\ de\ la\ classe\ Node\r\n\ \r\n
comment1.params=
comment1.target=ExprIF\ getReducedTree()
comment1.text=\r\n\ Simplification\ de\ l'arbre.\r\n\r\n\ @pre\ l'arbre\ represente\ une\ expression\ arithmetique\ \r\n\ \ \ \ \ \ bien\ construite\r\n\ @post\ Si\ l'arbre\ contient\ au\ moins\ un\ operateur,\ \r\n\ \ \ \ \ \ \ l'arbre\ renvoye\ est\ obtenu\ apr\u00E8s\ une\ simplification\ \r\n\ \ \ \ \ \ \ dans\ l'ordre\ d'un\ parcours\ postfixe\r\n\ \ \ \ \ \ \ Sinon,\ renvoit\ l'arbre\ original.\r\n
comment10.params=exp
comment10.target=void\ setExpression(java.lang.String)
comment11.params=chTp
comment11.target=void\ setChainTemp(java.lang.String)
comment12.params=n
comment12.target=void\ setLeft(Node)
comment13.params=n
comment13.target=void\ setRight(Node)
comment14.params=n
comment14.target=void\ setBack(Node)
comment15.params=n
comment15.target=void\ setNext(Node)
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\r\n\ Conversion\ de\ l'arbre\ en\ un\ String.\r\n\r\n\ @pre\ l'arbre\ repr\u00E9sente\ une\ expression\ arithm\u00E9tique\ \r\n\ \ \ \ \ \ bien\ construite\r\n\ @post\ le\ String\ renvoy\u00E9\ est\ la\ repr\u00E9sentation\ \r\n\ \ \ \ \ \ \ compl\u00E8tement\ parenth\u00E9s\u00E9e\ de\ l'arbre\ \ \r\n
comment3.params=operation
comment3.target=java.lang.String\ calcul(java.lang.String)
comment3.text=\r\n\ \r\n\ @pre\ operation\ est\ un\ String\ non\ null\ sous\ la\ forme\ (chiffre\ operateur\ chiffre)\ sans\ espace\r\n\ @post\ renvois\ la\ sulution\ du\ calcul\ contenue\ dans\ operation\r\n\ \r\n
comment4.params=
comment4.target=java.lang.String\ getExpression()
comment5.params=
comment5.target=java.lang.String\ getChainTemp()
comment6.params=
comment6.target=Node\ getLeft()
comment7.params=
comment7.target=Node\ getRight()
comment8.params=
comment8.target=Node\ getBack()
comment9.params=
comment9.target=Node\ getNext()
numComments=16
